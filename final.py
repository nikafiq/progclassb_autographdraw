# -*- coding: utf-8 -*-
"""Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NOc5znybX6rqHpGzLMgqGohWvg4rGQq6

# ライブラリ追加＆データ整理挿入
"""

import pandas as pd
import plotly
import plotly.graph_objs as go
import plotly.io as pio
pio.renderers.default = "colab"
plotly.__version__

#pop = Population, dth = Death, brh = Birth, ent = Entry, dep = departure
pop = pd.read_csv('/content/drive/MyDrive/システム開発B/Finals/TimeSeriesResult_20211208154905077.csv')
dth = pd.read_csv('/content/drive/MyDrive/システム開発B/Finals/TimeSeriesResult_20211201162814396.csv')
brh = pd.read_csv('/content/drive/MyDrive/システム開発B/Finals/TimeSeriesResult_20211201162857252.csv')
ent = pd.read_csv('/content/drive/MyDrive/システム開発B/Finals/TimeSeriesResult_20211201163610109.csv')
dep = pd.read_csv('/content/drive/MyDrive/システム開発B/Finals/TimeSeriesResult_20211201163718133.csv')

#データ確認
dth.head(3)
brh.head(3)
#ent.head(3)
#dep.head(3)
#pop.head(3)

dbt = (dth['時点'])
dth1 = (dth['死亡数【人】'])
brh1 = (brh['出生数【人】'])
popt = (pop['時点'])
pop1 = (pop['総人口（総数）【人】'])

"""# 総人口グラフ"""

#@title Population {run: "auto"}
popscat = go.Scatter(
    mode = 'markers',
    x = popt,
    y = pop1,
    name = "総人口",
    marker = dict(color = 'red')
)

popline = go.Scatter(
    mode = 'lines',
    x = popt,
    y = pop1,
    name = "総人口",
    marker = dict(color = 'red'),
)

popbar = go.Bar(
    x = popt,
    y = pop1,
    name = "総人口",
    marker = dict(color = 'red')
)

poplayout = go.Layout(
    title = "総人口",
    xaxis = dict(title = "時点（年）"),
    yaxis = dict(title = "数（人）")
)

graph = "line" #@param ["bar","scatter","line"]

if graph.lower() in ['bar']:
  gtype = popbar
elif graph.lower() in ['scatter']:
  gtype = popscat
else:
  gtype = popline

dbfig = go.Figure(gtype, poplayout)
dbfig.update_layout(
    width = 600,
    height = 600,
)
dbfig.show()

"""#出生と死亡グラフ"""

#@title Death and birth comparison {run: "auto"}
dbscat1 = go.Scatter(
    mode = 'markers',
    x = dbt,
    y = dth1,
    name = "死亡数",
    marker = dict(color = 'red')
)
dbscat2 = go.Scatter(
    mode = 'markers',
    x = dbt,
    y = brh1,
    name = "出生数",
    marker = dict(color = 'green')
)
dbscat = [dbscat1, dbscat2]

dbline1 = go.Scatter(
    mode = 'lines',
    x = dbt,
    y = dth1,
    name = "死亡数",
    marker = dict(color = 'red'),
)
dbline2 = go.Scatter(
    mode = 'lines',
    x = dbt,
    y = brh1,
    name = "出生数",
    marker = dict(color = 'green')
)
dbline = [dbline1, dbline2]

dbbar1 = go.Bar(
    x = dbt,
    y = dth1,
    name = "死亡数",
    marker = dict(color = 'red')
)
dbbar2 = go.Bar(
    x = dbt,
    y = brh1,
    name = "出生数",
    marker = dict(color = 'green')
)
dbbar = [dbbar1, dbbar2]

dblayout = go.Layout(
    title = "死亡出生数",
    xaxis = dict(title = "時点（年）"),
    yaxis = dict(title = "数（人）")
)

graph = "line" #@param ["bar","scatter","line"]

if graph.lower() in ['bar']:
  gtype = dbbar
elif graph.lower() in ['scatter']:
  gtype = dbscat
else:
  gtype = dbline

dbfig = go.Figure(gtype, dblayout)
dbfig.update_layout(
    width = 600,
    height = 600,
)
dbfig.show()

"""# データ分析"""

import statistics as st
devbrh = st.stdev(brh1)
print(devbrh)
devdth = st.stdev(dth1)
print(devdth)

pop1.max()

dth.head()

mxbrh = max(brh1)
mnbrh = min(brh1)
mxdth = max(dth1)
mndth = min(dth1)
mxpop = max(pop1)
mnpop = min(pop1)

print('Max birth=',brh.loc[brh['出生数【人】']==mxbrh], end="\n\n")
print('Min birth=',brh.loc[brh['出生数【人】']==mnbrh], end="\n\n\n")
print('Max death=',brh.loc[dth['死亡数【人】']==mxdth], end="\n\n")
print('Min death=',brh.loc[dth['死亡数【人】']==mndth], end="\n\n\n")
print('Max population=',brh.loc[pop['総人口（総数）【人】']==mxpop], end="\n\n")
print('Min population=',brh.loc[pop['総人口（総数）【人】']==mnpop], end="\n\n")

"""# 分析グラフ"""

#@title Min Max Death Birth {run: "auto"}
import plotly.graph_objects as go
num=['出生数', '死亡数']

fig = go.Figure(data=[
    go.Bar(name='最大', x=num, y=[mxbrh, mxbrh]),
    go.Bar(name='最小', x=num, y=[mnbrh, mndth])
])
fig.update_layout(
    barmode='group',
    width = 600,
    height = 600,
)
fig.show()

#@title Min Max Population {run: "auto"}
import plotly.graph_objects as go
num=['総人口数']

fig = go.Figure(data=[
    go.Bar(name='最大', x=num, y=[mxpop]),
    go.Bar(name='最小', x=num, y=[mnpop])
])
fig.update_layout(
    barmode='group',
    width = 600,
    height = 600,
)
fig.show()